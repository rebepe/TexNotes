%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 121 80
%%Creator: yExport 1.4.0.1
%%Producer: org.freehep.graphicsio.ps.PSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Montag, 23. Juni 2014 16:51 Uhr MESZ
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
121 80 setpagesize
0 0 0 0 setmargins
0 0 setorigin
121 80 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
121.000 0.00000 l
121.000 80.0000 l
0.00000 80.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 121 80 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -547.000 -523.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
547.000 523.000 m
668.000 523.000 l
668.000 603.000 l
547.000 603.000 l
547.000 523.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -547.000 -523.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -547.000 -523.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -547.000 -523.000 ] defaultmatrix matrix concatmatrix setmatrix
.752941 .752941 .752941 RG
newpath
547.500 525.938 m
667.500 525.938 l
667.500 602.930 l
547.500 602.930 l
547.500 525.938 l
h
f
0.00000 0.00000 0.00000 RG
1.00000 1.00000 1.00000 RG
newpath
577.500 540.500 m
592.500 540.500 l
592.500 555.500 l
577.500 555.500 l
577.500 540.500 l
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
582.316 551.143 m
584.520 545.408 l
585.332 545.408 l
587.676 551.143 l
586.816 551.143 l
586.145 549.408 l
583.754 549.408 l
583.129 551.143 l
582.316 551.143 l
h
583.973 548.783 m
585.910 548.783 l
585.316 547.205 l
585.139 546.726 585.004 546.330 584.910 546.018  c
584.837 546.382 584.733 546.747 584.598 547.111  c
583.973 548.783 l
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
577.500 540.500 m
592.500 540.500 l
592.500 555.500 l
577.500 555.500 l
577.500 540.500 l
h
S
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
622.500 540.500 m
637.500 540.500 l
637.500 555.500 l
622.500 555.500 l
622.500 540.500 l
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
627.926 551.143 m
627.926 545.408 l
630.066 545.408 l
630.504 545.408 630.855 545.468 631.121 545.588  c
631.387 545.708 631.595 545.887 631.746 546.127  c
631.897 546.367 631.973 546.617 631.973 546.877  c
631.973 547.127 631.905 547.359 631.770 547.572  c
631.634 547.786 631.431 547.960 631.160 548.096  c
631.514 548.200 631.783 548.374 631.965 548.619  c
632.147 548.864 632.238 549.153 632.238 549.486  c
632.238 549.747 632.184 549.994 632.074 550.229  c
631.965 550.463 631.827 550.643 631.660 550.768  c
631.493 550.893 631.283 550.986 631.027 551.049  c
630.772 551.111 630.462 551.143 630.098 551.143  c
627.926 551.143 l
h
628.676 547.814 m
629.910 547.814 l
630.254 547.814 630.499 547.794 630.645 547.752  c
630.832 547.700 630.975 547.606 631.074 547.471  c
631.173 547.335 631.223 547.169 631.223 546.971  c
631.223 546.783 631.176 546.617 631.082 546.471  c
630.988 546.325 630.858 546.226 630.691 546.174  c
630.525 546.122 630.233 546.096 629.816 546.096  c
628.676 546.096 l
628.676 547.814 l
h
628.676 550.471 m
630.098 550.471 l
630.348 550.471 630.520 550.460 630.613 550.439  c
630.790 550.408 630.939 550.356 631.059 550.283  c
631.178 550.210 631.275 550.104 631.348 549.963  c
631.421 549.822 631.457 549.663 631.457 549.486  c
631.457 549.268 631.402 549.080 631.293 548.924  c
631.184 548.768 631.033 548.658 630.840 548.596  c
630.647 548.533 630.368 548.502 630.004 548.502  c
628.676 548.502 l
628.676 550.471 l
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
622.500 540.500 m
637.500 540.500 l
637.500 555.500 l
622.500 555.500 l
622.500 540.500 l
h
S
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
579.700 570.500 m
594.700 570.500 l
594.700 585.500 l
579.700 585.500 l
579.700 570.500 l
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
584.516 581.143 m
586.720 575.408 l
587.532 575.408 l
589.876 581.143 l
589.016 581.143 l
588.345 579.408 l
585.954 579.408 l
585.329 581.143 l
584.516 581.143 l
h
586.173 578.783 m
588.110 578.783 l
587.516 577.205 l
587.339 576.726 587.204 576.330 587.110 576.018  c
587.037 576.382 586.933 576.747 586.798 577.111  c
586.173 578.783 l
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
579.700 570.500 m
594.700 570.500 l
594.700 585.500 l
579.700 585.500 l
579.700 570.500 l
h
S
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
622.500 570.500 m
637.500 570.500 l
637.500 585.500 l
622.500 585.500 l
622.500 570.500 l
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
627.926 581.143 m
627.926 575.408 l
630.066 575.408 l
630.504 575.408 630.855 575.468 631.121 575.588  c
631.387 575.708 631.595 575.887 631.746 576.127  c
631.897 576.367 631.973 576.617 631.973 576.877  c
631.973 577.127 631.905 577.359 631.770 577.572  c
631.634 577.786 631.431 577.960 631.160 578.096  c
631.514 578.200 631.783 578.374 631.965 578.619  c
632.147 578.864 632.238 579.153 632.238 579.486  c
632.238 579.747 632.184 579.994 632.074 580.229  c
631.965 580.463 631.827 580.643 631.660 580.768  c
631.493 580.893 631.283 580.986 631.027 581.049  c
630.772 581.111 630.462 581.143 630.098 581.143  c
627.926 581.143 l
h
628.676 577.814 m
629.910 577.814 l
630.254 577.814 630.499 577.794 630.645 577.752  c
630.832 577.700 630.975 577.606 631.074 577.471  c
631.173 577.335 631.223 577.169 631.223 576.971  c
631.223 576.783 631.176 576.617 631.082 576.471  c
630.988 576.325 630.858 576.226 630.691 576.174  c
630.525 576.122 630.233 576.096 629.816 576.096  c
628.676 576.096 l
628.676 577.814 l
h
628.676 580.471 m
630.098 580.471 l
630.348 580.471 630.520 580.460 630.613 580.439  c
630.790 580.408 630.939 580.356 631.059 580.283  c
631.178 580.210 631.275 580.104 631.348 579.963  c
631.421 579.822 631.457 579.663 631.457 579.486  c
631.457 579.268 631.402 579.080 631.293 578.924  c
631.184 578.768 631.033 578.658 630.840 578.596  c
630.647 578.533 630.368 578.502 630.004 578.502  c
628.676 578.502 l
628.676 580.471 l
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
622.500 570.500 m
637.500 570.500 l
637.500 585.500 l
622.500 585.500 l
622.500 570.500 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
592.500 548.000 m
614.500 548.000 l
S
newpath
622.500 548.000 m
610.500 543.000 l
613.500 548.000 l
610.500 553.000 l
h
f
newpath
562.484 537.536 m
565.780 528.942 l
566.999 528.942 l
570.515 537.536 l
569.234 537.536 l
568.218 534.927 l
564.640 534.927 l
563.687 537.536 l
562.484 537.536 l
h
564.968 534.005 m
567.874 534.005 l
566.984 531.630 l
566.702 530.911 566.499 530.317 566.374 529.848  c
566.260 530.400 566.103 530.947 565.905 531.489  c
564.968 534.005 l
h
574.212 535.677 m
575.243 535.520 l
575.306 535.937 575.470 536.255 575.735 536.473  c
576.001 536.692 576.379 536.802 576.868 536.802  c
577.347 536.802 577.704 536.705 577.939 536.512  c
578.173 536.320 578.290 536.088 578.290 535.817  c
578.290 535.578 578.186 535.390 577.978 535.255  c
577.832 535.161 577.472 535.041 576.900 534.895  c
576.129 534.697 575.595 534.528 575.298 534.387  c
575.001 534.247 574.775 534.052 574.618 533.802  c
574.462 533.552 574.384 533.270 574.384 532.958  c
574.384 532.687 574.446 532.432 574.571 532.192  c
574.696 531.953 574.868 531.755 575.087 531.598  c
575.254 531.484 575.478 531.385 575.759 531.302  c
576.040 531.218 576.347 531.177 576.681 531.177  c
577.160 531.177 577.584 531.247 577.954 531.387  c
578.324 531.528 578.597 531.718 578.775 531.958  c
578.952 532.197 579.071 532.515 579.134 532.911  c
578.103 533.052 l
578.061 532.739 577.928 532.492 577.704 532.309  c
577.480 532.127 577.160 532.036 576.743 532.036  c
576.264 532.036 575.920 532.117 575.712 532.278  c
575.504 532.440 575.400 532.630 575.400 532.848  c
575.400 532.984 575.441 533.104 575.525 533.208  c
575.618 533.322 575.754 533.416 575.931 533.489  c
576.035 533.531 576.347 533.619 576.868 533.755  c
577.618 533.963 578.139 534.130 578.431 534.255  c
578.722 534.380 578.952 534.562 579.118 534.802  c
579.285 535.041 579.368 535.343 579.368 535.708  c
579.368 536.062 579.267 536.393 579.064 536.700  c
578.860 537.007 578.566 537.247 578.181 537.419  c
577.795 537.591 577.358 537.677 576.868 537.677  c
576.056 537.677 575.439 537.507 575.017 537.169  c
574.595 536.830 574.327 536.333 574.212 535.677  c
h
584.884 535.536 m
585.978 535.661 l
585.811 536.296 585.493 536.791 585.025 537.145  c
584.556 537.499 583.962 537.677 583.243 537.677  c
582.337 537.677 581.616 537.395 581.079 536.833  c
580.543 536.270 580.275 535.484 580.275 534.473  c
580.275 533.432 580.545 532.622 581.087 532.044  c
581.629 531.466 582.327 531.177 583.181 531.177  c
584.014 531.177 584.694 531.458 585.220 532.020  c
585.746 532.583 586.009 533.380 586.009 534.411  c
586.009 534.473 586.009 534.567 586.009 534.692  c
581.368 534.692 l
581.410 535.380 581.603 535.903 581.946 536.262  c
582.290 536.622 582.722 536.802 583.243 536.802  c
583.629 536.802 583.959 536.700 584.235 536.497  c
584.512 536.294 584.728 535.973 584.884 535.536  c
h
581.431 533.833 m
584.900 533.833 l
584.858 533.302 584.728 532.906 584.509 532.645  c
584.165 532.239 583.728 532.036 583.196 532.036  c
582.707 532.036 582.298 532.197 581.970 532.520  c
581.642 532.843 581.462 533.281 581.431 533.833  c
h
589.605 536.598 m
589.761 537.520 l
589.459 537.583 589.193 537.614 588.964 537.614  c
588.579 537.614 588.282 537.554 588.073 537.434  c
587.865 537.315 587.717 537.156 587.628 536.958  c
587.540 536.760 587.495 536.343 587.495 535.708  c
587.495 532.130 l
586.730 532.130 l
586.730 531.317 l
587.495 531.317 l
587.495 529.770 l
588.542 529.145 l
588.542 531.317 l
589.605 531.317 l
589.605 532.130 l
588.542 532.130 l
588.542 535.770 l
588.542 536.072 588.560 536.265 588.597 536.348  c
588.633 536.432 588.693 536.499 588.776 536.552  c
588.860 536.604 588.980 536.630 589.136 536.630  c
589.261 536.630 589.417 536.619 589.605 536.598  c
h
590.079 537.536 m
590.079 536.677 l
594.048 532.130 l
593.590 532.150 593.189 532.161 592.845 532.161  c
590.314 532.161 l
590.314 531.317 l
595.407 531.317 l
595.407 532.005 l
592.032 535.958 l
591.376 536.677 l
591.855 536.645 592.298 536.630 592.704 536.630  c
595.595 536.630 l
595.595 537.536 l
590.079 537.536 l
h
598.939 536.598 m
599.095 537.520 l
598.793 537.583 598.527 537.614 598.298 537.614  c
597.913 537.614 597.616 537.554 597.407 537.434  c
597.199 537.315 597.051 537.156 596.962 536.958  c
596.873 536.760 596.829 536.343 596.829 535.708  c
596.829 532.130 l
596.064 532.130 l
596.064 531.317 l
596.829 531.317 l
596.829 529.770 l
597.876 529.145 l
597.876 531.317 l
598.939 531.317 l
598.939 532.130 l
597.876 532.130 l
597.876 535.770 l
597.876 536.072 597.894 536.265 597.931 536.348  c
597.967 536.432 598.027 536.499 598.110 536.552  c
598.194 536.604 598.314 536.630 598.470 536.630  c
598.595 536.630 598.751 536.619 598.939 536.598  c
h
603.388 537.536 m
603.388 528.942 l
606.622 528.942 l
607.278 528.942 607.804 529.031 608.200 529.208  c
608.596 529.385 608.906 529.653 609.130 530.012  c
609.354 530.372 609.466 530.749 609.466 531.145  c
609.466 531.510 609.367 531.854 609.169 532.177  c
608.971 532.499 608.669 532.760 608.263 532.958  c
608.784 533.114 609.182 533.377 609.458 533.747  c
609.734 534.117 609.872 534.552 609.872 535.052  c
609.872 535.447 609.789 535.820 609.622 536.169  c
609.456 536.518 609.247 536.786 608.997 536.973  c
608.747 537.161 608.432 537.302 608.052 537.395  c
607.672 537.489 607.211 537.536 606.669 537.536  c
603.388 537.536 l
h
604.528 532.552 m
606.388 532.552 l
606.888 532.552 607.247 532.520 607.466 532.458  c
607.758 532.374 607.976 532.231 608.122 532.028  c
608.268 531.825 608.341 531.572 608.341 531.270  c
608.341 530.989 608.273 530.739 608.138 530.520  c
608.002 530.302 607.807 530.153 607.552 530.075  c
607.297 529.997 606.862 529.958 606.247 529.958  c
604.528 529.958 l
604.528 532.552 l
h
604.528 536.520 m
606.669 536.520 l
607.034 536.520 607.289 536.505 607.435 536.473  c
607.706 536.432 607.927 536.356 608.099 536.247  c
608.271 536.137 608.414 535.979 608.528 535.770  c
608.643 535.562 608.700 535.322 608.700 535.052  c
608.700 534.729 608.620 534.447 608.458 534.208  c
608.297 533.968 608.070 533.802 607.778 533.708  c
607.487 533.614 607.065 533.567 606.513 533.567  c
604.528 533.567 l
604.528 536.520 l
h
616.366 537.536 m
614.007 531.317 l
615.116 531.317 l
616.460 535.036 l
616.595 535.442 616.726 535.859 616.851 536.286  c
616.944 535.963 617.075 535.572 617.241 535.114  c
618.632 531.317 l
619.710 531.317 l
617.351 537.536 l
616.366 537.536 l
h
620.257 534.427 m
620.257 533.270 620.575 532.416 621.210 531.864  c
621.741 531.406 622.392 531.177 623.163 531.177  c
624.017 531.177 624.718 531.455 625.265 532.012  c
625.812 532.570 626.085 533.343 626.085 534.333  c
626.085 535.135 625.965 535.765 625.726 536.223  c
625.486 536.682 625.135 537.038 624.671 537.294  c
624.207 537.549 623.705 537.677 623.163 537.677  c
622.299 537.677 621.598 537.398 621.062 536.841  c
620.525 536.283 620.257 535.479 620.257 534.427  c
h
621.335 534.427 m
621.335 535.218 621.510 535.812 621.859 536.208  c
622.207 536.604 622.642 536.802 623.163 536.802  c
623.694 536.802 624.132 536.604 624.476 536.208  c
624.819 535.812 624.991 535.208 624.991 534.395  c
624.991 533.624 624.817 533.041 624.468 532.645  c
624.119 532.249 623.684 532.052 623.163 532.052  c
622.642 532.052 622.207 532.247 621.859 532.637  c
621.510 533.028 621.335 533.624 621.335 534.427  c
h
627.306 537.536 m
627.306 531.317 l
628.259 531.317 l
628.259 532.255 l
628.498 531.817 628.720 531.528 628.923 531.387  c
629.126 531.247 629.353 531.177 629.603 531.177  c
629.957 531.177 630.316 531.286 630.681 531.505  c
630.321 532.489 l
630.061 532.333 629.806 532.255 629.556 532.255  c
629.316 532.255 629.105 532.325 628.923 532.466  c
628.741 532.606 628.613 532.802 628.540 533.052  c
628.415 533.427 628.353 533.833 628.353 534.270  c
628.353 537.536 l
627.306 537.536 l
h
631.302 537.536 m
631.302 531.317 l
632.255 531.317 l
632.255 532.255 l
632.495 531.817 632.716 531.528 632.919 531.387  c
633.122 531.247 633.349 531.177 633.599 531.177  c
633.953 531.177 634.312 531.286 634.677 531.505  c
634.318 532.489 l
634.057 532.333 633.802 532.255 633.552 532.255  c
633.312 532.255 633.101 532.325 632.919 532.466  c
632.737 532.606 632.609 532.802 632.536 533.052  c
632.411 533.427 632.349 533.833 632.349 534.270  c
632.349 537.536 l
631.302 537.536 l
h
639.376 536.770 m
638.980 537.104 638.603 537.338 638.243 537.473  c
637.884 537.609 637.496 537.677 637.079 537.677  c
636.392 537.677 635.866 537.510 635.501 537.177  c
635.137 536.843 634.954 536.416 634.954 535.895  c
634.954 535.593 635.022 535.315 635.157 535.059  c
635.293 534.804 635.475 534.601 635.704 534.450  c
635.933 534.299 636.189 534.187 636.470 534.114  c
636.668 534.052 636.980 533.994 637.407 533.942  c
638.251 533.848 638.876 533.729 639.282 533.583  c
639.282 533.437 639.282 533.348 639.282 533.317  c
639.282 532.880 639.183 532.572 638.985 532.395  c
638.715 532.166 638.314 532.052 637.782 532.052  c
637.293 532.052 636.928 532.137 636.689 532.309  c
636.449 532.481 636.272 532.786 636.157 533.223  c
635.126 533.083 l
635.220 532.645 635.376 532.291 635.595 532.020  c
635.814 531.749 636.126 531.541 636.532 531.395  c
636.939 531.249 637.407 531.177 637.939 531.177  c
638.470 531.177 638.902 531.239 639.235 531.364  c
639.569 531.489 639.814 531.645 639.970 531.833  c
640.126 532.020 640.235 532.260 640.298 532.552  c
640.329 532.729 640.345 533.052 640.345 533.520  c
640.345 534.927 l
640.345 535.906 640.368 536.525 640.415 536.786  c
640.462 537.046 640.553 537.296 640.689 537.536  c
639.579 537.536 l
639.475 537.317 639.407 537.062 639.376 536.770  c
h
639.282 534.411 m
638.897 534.567 638.324 534.703 637.564 534.817  c
637.126 534.880 636.819 534.950 636.642 535.028  c
636.465 535.106 636.327 535.218 636.228 535.364  c
636.129 535.510 636.079 535.677 636.079 535.864  c
636.079 536.145 636.186 536.380 636.400 536.567  c
636.613 536.755 636.923 536.848 637.329 536.848  c
637.735 536.848 638.097 536.760 638.415 536.583  c
638.733 536.406 638.965 536.161 639.110 535.848  c
639.225 535.609 639.282 535.260 639.282 534.802  c
639.282 534.411 l
h
646.066 537.536 m
646.066 536.614 l
645.576 537.322 644.915 537.677 644.081 537.677  c
643.717 537.677 643.375 537.606 643.058 537.466  c
642.740 537.325 642.503 537.148 642.347 536.934  c
642.191 536.721 642.081 536.458 642.019 536.145  c
641.977 535.947 641.956 535.619 641.956 535.161  c
641.956 531.317 l
643.019 531.317 l
643.019 534.770 l
643.019 535.312 643.040 535.682 643.081 535.880  c
643.144 536.150 643.282 536.367 643.495 536.528  c
643.709 536.690 643.977 536.770 644.300 536.770  c
644.612 536.770 644.907 536.690 645.183 536.528  c
645.459 536.367 645.657 536.145 645.776 535.864  c
645.896 535.583 645.956 535.177 645.956 534.645  c
645.956 531.317 l
647.003 531.317 l
647.003 537.536 l
646.066 537.536 l
h
648.239 535.677 m
649.271 535.520 l
649.333 535.937 649.497 536.255 649.763 536.473  c
650.028 536.692 650.406 536.802 650.896 536.802  c
651.375 536.802 651.732 536.705 651.966 536.512  c
652.200 536.320 652.318 536.088 652.318 535.817  c
652.318 535.578 652.213 535.390 652.005 535.255  c
651.859 535.161 651.500 535.041 650.927 534.895  c
650.156 534.697 649.622 534.528 649.325 534.387  c
649.028 534.247 648.802 534.052 648.646 533.802  c
648.489 533.552 648.411 533.270 648.411 532.958  c
648.411 532.687 648.474 532.432 648.599 532.192  c
648.724 531.953 648.896 531.755 649.114 531.598  c
649.281 531.484 649.505 531.385 649.786 531.302  c
650.068 531.218 650.375 531.177 650.708 531.177  c
651.187 531.177 651.612 531.247 651.982 531.387  c
652.351 531.528 652.625 531.718 652.802 531.958  c
652.979 532.197 653.099 532.515 653.161 532.911  c
652.130 533.052 l
652.088 532.739 651.956 532.492 651.732 532.309  c
651.508 532.127 651.187 532.036 650.771 532.036  c
650.291 532.036 649.948 532.117 649.739 532.278  c
649.531 532.440 649.427 532.630 649.427 532.848  c
649.427 532.984 649.469 533.104 649.552 533.208  c
649.646 533.322 649.781 533.416 649.958 533.489  c
650.062 533.531 650.375 533.619 650.896 533.755  c
651.646 533.963 652.166 534.130 652.458 534.255  c
652.750 534.380 652.979 534.562 653.146 534.802  c
653.312 535.041 653.396 535.343 653.396 535.708  c
653.396 536.062 653.294 536.393 653.091 536.700  c
652.888 537.007 652.594 537.247 652.208 537.419  c
651.823 537.591 651.385 537.677 650.896 537.677  c
650.083 537.677 649.466 537.507 649.044 537.169  c
648.622 536.830 648.354 536.333 648.239 535.677  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
602.700 578.000 m
614.500 578.000 l
S
newpath
594.700 578.000 m
606.700 583.000 l
603.700 578.000 l
606.700 573.000 l
h
f
newpath
622.500 578.000 m
610.500 573.000 l
613.500 578.000 l
610.500 583.000 l
h
f
newpath
569.380 596.518 m
567.098 587.924 l
568.270 587.924 l
569.583 593.565 l
569.718 594.148 569.838 594.732 569.942 595.315  c
570.161 594.398 570.291 593.867 570.333 593.721  c
571.958 587.924 l
573.333 587.924 l
574.567 592.268 l
574.869 593.352 575.093 594.367 575.239 595.315  c
575.343 594.773 575.484 594.148 575.661 593.440  c
577.005 587.924 l
578.145 587.924 l
575.801 596.518 l
574.692 596.518 l
572.895 589.971 l
572.739 589.430 572.645 589.096 572.614 588.971  c
572.531 589.357 572.447 589.690 572.364 589.971  c
570.551 596.518 l
569.380 596.518 l
h
583.331 594.518 m
584.424 594.643 l
584.258 595.279 583.940 595.773 583.471 596.128  c
583.003 596.482 582.409 596.659 581.690 596.659  c
580.784 596.659 580.063 596.378 579.526 595.815  c
578.990 595.253 578.721 594.466 578.721 593.456  c
578.721 592.414 578.992 591.604 579.534 591.026  c
580.076 590.448 580.773 590.159 581.628 590.159  c
582.461 590.159 583.141 590.440 583.667 591.003  c
584.193 591.565 584.456 592.362 584.456 593.393  c
584.456 593.456 584.456 593.549 584.456 593.674  c
579.815 593.674 l
579.857 594.362 580.049 594.885 580.393 595.245  c
580.737 595.604 581.169 595.784 581.690 595.784  c
582.076 595.784 582.406 595.682 582.682 595.479  c
582.958 595.276 583.174 594.956 583.331 594.518  c
h
579.878 592.815 m
583.346 592.815 l
583.305 592.284 583.174 591.888 582.956 591.628  c
582.612 591.221 582.174 591.018 581.643 591.018  c
581.154 591.018 580.745 591.180 580.417 591.503  c
580.089 591.826 579.909 592.263 579.878 592.815  c
h
589.817 594.237 m
590.848 594.378 l
590.734 595.086 590.442 595.643 589.973 596.049  c
589.505 596.456 588.932 596.659 588.255 596.659  c
587.400 596.659 586.716 596.380 586.200 595.823  c
585.684 595.266 585.426 594.466 585.426 593.424  c
585.426 592.758 585.538 592.172 585.762 591.667  c
585.986 591.161 586.325 590.784 586.778 590.534  c
587.231 590.284 587.729 590.159 588.270 590.159  c
588.937 590.159 589.486 590.328 589.919 590.667  c
590.351 591.005 590.630 591.492 590.755 592.128  c
589.723 592.284 l
589.630 591.867 589.458 591.552 589.208 591.339  c
588.958 591.125 588.656 591.018 588.301 591.018  c
587.770 591.018 587.338 591.208 587.005 591.589  c
586.671 591.969 586.505 592.570 586.505 593.393  c
586.505 594.237 586.666 594.846 586.989 595.221  c
587.312 595.596 587.729 595.784 588.239 595.784  c
588.656 595.784 589.002 595.659 589.278 595.409  c
589.554 595.159 589.734 594.768 589.817 594.237  c
h
591.755 596.518 m
591.755 587.924 l
592.801 587.924 l
592.801 591.003 l
593.291 590.440 593.911 590.159 594.661 590.159  c
595.130 590.159 595.533 590.250 595.872 590.432  c
596.210 590.615 596.452 590.865 596.598 591.182  c
596.744 591.500 596.817 591.966 596.817 592.581  c
596.817 596.518 l
595.770 596.518 l
595.770 592.581 l
595.770 592.049 595.656 591.664 595.426 591.424  c
595.197 591.185 594.874 591.065 594.458 591.065  c
594.145 591.065 593.851 591.146 593.575 591.307  c
593.299 591.469 593.101 591.688 592.981 591.964  c
592.861 592.240 592.801 592.622 592.801 593.112  c
592.801 596.518 l
591.755 596.518 l
h
598.007 594.659 m
599.038 594.503 l
599.100 594.919 599.264 595.237 599.530 595.456  c
599.796 595.674 600.173 595.784 600.663 595.784  c
601.142 595.784 601.499 595.688 601.733 595.495  c
601.967 595.302 602.085 595.070 602.085 594.799  c
602.085 594.560 601.980 594.372 601.772 594.237  c
601.626 594.143 601.267 594.023 600.694 593.878  c
599.923 593.680 599.389 593.510 599.092 593.370  c
598.796 593.229 598.569 593.034 598.413 592.784  c
598.257 592.534 598.178 592.253 598.178 591.940  c
598.178 591.669 598.241 591.414 598.366 591.174  c
598.491 590.935 598.663 590.737 598.882 590.581  c
599.048 590.466 599.272 590.367 599.553 590.284  c
599.835 590.201 600.142 590.159 600.475 590.159  c
600.954 590.159 601.379 590.229 601.749 590.370  c
602.119 590.510 602.392 590.701 602.569 590.940  c
602.746 591.180 602.866 591.497 602.928 591.893  c
601.897 592.034 l
601.855 591.721 601.723 591.474 601.499 591.292  c
601.275 591.109 600.954 591.018 600.538 591.018  c
600.059 591.018 599.715 591.099 599.507 591.260  c
599.298 591.422 599.194 591.612 599.194 591.831  c
599.194 591.966 599.236 592.086 599.319 592.190  c
599.413 592.305 599.548 592.398 599.725 592.471  c
599.829 592.513 600.142 592.602 600.663 592.737  c
601.413 592.945 601.934 593.112 602.225 593.237  c
602.517 593.362 602.746 593.544 602.913 593.784  c
603.079 594.023 603.163 594.326 603.163 594.690  c
603.163 595.044 603.061 595.375 602.858 595.682  c
602.655 595.990 602.361 596.229 601.975 596.401  c
601.590 596.573 601.152 596.659 600.663 596.659  c
599.850 596.659 599.233 596.490 598.811 596.151  c
598.389 595.813 598.121 595.315 598.007 594.659  c
h
608.678 594.518 m
609.772 594.643 l
609.605 595.279 609.288 595.773 608.819 596.128  c
608.350 596.482 607.757 596.659 607.038 596.659  c
606.132 596.659 605.410 596.378 604.874 595.815  c
604.337 595.253 604.069 594.466 604.069 593.456  c
604.069 592.414 604.340 591.604 604.882 591.026  c
605.423 590.448 606.121 590.159 606.975 590.159  c
607.809 590.159 608.488 590.440 609.014 591.003  c
609.540 591.565 609.803 592.362 609.803 593.393  c
609.803 593.456 609.803 593.549 609.803 593.674  c
605.163 593.674 l
605.204 594.362 605.397 594.885 605.741 595.245  c
606.085 595.604 606.517 595.784 607.038 595.784  c
607.423 595.784 607.754 595.682 608.030 595.479  c
608.306 595.276 608.522 594.956 608.678 594.518  c
h
605.225 592.815 m
608.694 592.815 l
608.652 592.284 608.522 591.888 608.303 591.628  c
607.960 591.221 607.522 591.018 606.991 591.018  c
606.501 591.018 606.092 591.180 605.764 591.503  c
605.436 591.826 605.257 592.263 605.225 592.815  c
h
611.071 596.518 m
611.071 587.924 l
612.133 587.924 l
612.133 596.518 l
611.071 596.518 l
h
614.909 596.518 m
613.003 590.299 l
614.096 590.299 l
615.081 593.893 l
615.456 595.221 l
615.477 595.159 615.586 594.732 615.784 593.940  c
616.768 590.299 l
617.846 590.299 l
618.784 593.909 l
619.096 595.096 l
619.456 593.893 l
620.518 590.299 l
621.549 590.299 l
619.596 596.518 l
618.503 596.518 l
617.518 592.784 l
617.268 591.737 l
616.018 596.518 l
614.909 596.518 l
h
622.434 589.143 m
622.434 587.924 l
623.497 587.924 l
623.497 589.143 l
622.434 589.143 l
h
622.434 596.518 m
622.434 590.299 l
623.497 590.299 l
623.497 596.518 l
622.434 596.518 l
h
625.085 596.518 m
625.085 590.299 l
626.038 590.299 l
626.038 591.237 l
626.277 590.799 626.499 590.510 626.702 590.370  c
626.905 590.229 627.132 590.159 627.382 590.159  c
627.736 590.159 628.095 590.268 628.460 590.487  c
628.100 591.471 l
627.840 591.315 627.585 591.237 627.335 591.237  c
627.095 591.237 626.884 591.307 626.702 591.448  c
626.520 591.589 626.392 591.784 626.319 592.034  c
626.194 592.409 626.132 592.815 626.132 593.253  c
626.132 596.518 l
625.085 596.518 l
h
629.096 596.518 m
629.096 587.924 l
630.159 587.924 l
630.159 592.831 l
632.643 590.299 l
634.018 590.299 l
631.628 592.596 l
634.253 596.518 l
632.956 596.518 l
630.893 593.331 l
630.159 594.049 l
630.159 596.518 l
629.096 596.518 l
h
639.174 596.518 m
639.174 595.596 l
638.685 596.305 638.023 596.659 637.190 596.659  c
636.826 596.659 636.484 596.589 636.167 596.448  c
635.849 596.307 635.612 596.130 635.456 595.917  c
635.299 595.703 635.190 595.440 635.128 595.128  c
635.086 594.930 635.065 594.602 635.065 594.143  c
635.065 590.299 l
636.128 590.299 l
636.128 593.753 l
636.128 594.294 636.148 594.664 636.190 594.862  c
636.253 595.133 636.391 595.349 636.604 595.510  c
636.818 595.672 637.086 595.753 637.409 595.753  c
637.721 595.753 638.016 595.672 638.292 595.510  c
638.568 595.349 638.766 595.128 638.885 594.846  c
639.005 594.565 639.065 594.159 639.065 593.628  c
639.065 590.299 l
640.112 590.299 l
640.112 596.518 l
639.174 596.518 l
h
641.770 596.518 m
641.770 590.299 l
642.708 590.299 l
642.708 591.174 l
643.166 590.497 643.827 590.159 644.692 590.159  c
645.067 590.159 645.413 590.227 645.731 590.362  c
646.049 590.497 646.286 590.674 646.442 590.893  c
646.598 591.112 646.708 591.367 646.770 591.659  c
646.801 591.857 646.817 592.201 646.817 592.690  c
646.817 596.518 l
645.770 596.518 l
645.770 592.737 l
645.770 592.299 645.729 591.977 645.645 591.768  c
645.562 591.560 645.416 591.391 645.208 591.260  c
644.999 591.130 644.755 591.065 644.473 591.065  c
644.025 591.065 643.637 591.208 643.309 591.495  c
642.981 591.781 642.817 592.320 642.817 593.112  c
642.817 596.518 l
641.770 596.518 l
h
648.241 597.034 m
649.272 597.190 l
649.314 597.503 649.434 597.732 649.632 597.878  c
649.892 598.076 650.246 598.174 650.694 598.174  c
651.184 598.174 651.561 598.076 651.827 597.878  c
652.092 597.680 652.272 597.409 652.366 597.065  c
652.428 596.846 652.454 596.393 652.444 595.706  c
651.986 596.247 651.413 596.518 650.725 596.518  c
649.871 596.518 649.210 596.208 648.741 595.589  c
648.272 594.969 648.038 594.232 648.038 593.378  c
648.038 592.784 648.145 592.234 648.358 591.729  c
648.572 591.224 648.882 590.836 649.288 590.565  c
649.694 590.294 650.173 590.159 650.725 590.159  c
651.465 590.159 652.074 590.456 652.553 591.049  c
652.553 590.299 l
653.522 590.299 l
653.522 595.674 l
653.522 596.643 653.423 597.331 653.225 597.737  c
653.027 598.143 652.715 598.464 652.288 598.698  c
651.861 598.932 651.335 599.049 650.710 599.049  c
649.970 599.049 649.371 598.883 648.913 598.549  c
648.454 598.216 648.230 597.711 648.241 597.034  c
h
649.116 593.299 m
649.116 594.112 649.277 594.706 649.600 595.081  c
649.923 595.456 650.329 595.643 650.819 595.643  c
651.309 595.643 651.717 595.456 652.046 595.081  c
652.374 594.706 652.538 594.122 652.538 593.331  c
652.538 592.570 652.369 591.997 652.030 591.612  c
651.691 591.227 651.283 591.034 650.803 591.034  c
650.335 591.034 649.936 591.224 649.608 591.604  c
649.280 591.984 649.116 592.549 649.116 593.299  c
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
end end restore showpage

%%Trailer
%%EOF
